name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.3.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18.x'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      tag: ${{ steps.extract.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Extract version
        id: extract
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "Releasing version: ${VERSION}"

      - name: Validate package.json version
        run: |
          PACKAGE_VERSION="v$(node -p "require('./package.json').version")"
          if [ "$PACKAGE_VERSION" != "${{ steps.extract.outputs.version }}" ]; then
            echo "Version mismatch: package.json has $PACKAGE_VERSION, tag is ${{ steps.extract.outputs.version }}"
            exit 1
          fi

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests
        run: npm run test

      - name: Build project
        run: npm run build

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get commits since last tag
          LAST_TAG=$(git tag --sort=-version:refname | grep -v "${{ needs.validate.outputs.tag }}" | head -1)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "### 🚀 Features" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD --grep="feat\|feature\|✨" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          echo "### 🐛 Bug Fixes" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD --grep="fix\|🐛" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          echo "### 📖 Documentation" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD --grep="docs\|📝\|📖" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          echo "### 🔧 Maintenance" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD --grep="chore\|refactor\|🔧\|♻️" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          echo "### 📦 Dependencies" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD --grep="deps\|dependencies\|📦" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

      - name: Create release assets
        run: |
          mkdir -p release-assets
          
          # Create distribution bundle
          tar -czf release-assets/gemini-flow-${{ needs.validate.outputs.version }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=tests \
            --exclude=coverage \
            --exclude=.nyc_output \
            .
          
          # Create documentation bundle
          if [ -d "docs" ]; then
            tar -czf release-assets/gemini-flow-docs-${{ needs.validate.outputs.version }}.tar.gz docs/
          fi
          
          # Generate checksums
          cd release-assets
          sha256sum *.tar.gz > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            release-assets/*.tar.gz
            release-assets/checksums.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: success()
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [validate, create-release, publish-npm]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **npm Publish**: ${{ needs.publish-npm.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY